#!/usr/bin/env ruby
# Copyright (C) Brian Candler 2009. Released under the Ruby licence.
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require 'snailgun'
require 'optparse'

sockpath = nil
mode = nil
envs = "test"
rake = false
verbose = false

def fix_rake
  require 'rbconfig'
  Config::CONFIG['bindir'] = File.expand_path(File.dirname(__FILE__))
  Config::CONFIG['ruby_install_name'] = 'fruby'
  require 'rubygems'
  require 'rake'
  require 'rake/testtask'
  require 'rake/rdoctask'
end

OptionParser.new do |opts|
  opts.on("-I DIR", "add to load path")		{ |v| $:.unshift v }
  opts.on("-r LIB", "require library")		{ |v| require v }
  opts.on("--rails [ENVS]", "rails mode")	{ |v| mode = :rails; envs = v }
  opts.on("--ruby [SOCKPATH]", "ruby mode")	{ |v| mode = :ruby; sockpath = v }
  opts.on("--rake", "add rake support")		{ rake = true }
  opts.on("-v", "--verbose", "show progress")	{ verbose = true }
end.parse!

mode ||= if Snailgun::Rails.is_rails_app?
           :rails
         else
           :ruby
         end

STDERR.puts "Starting in #{mode} mode" if verbose
case mode
when :ruby
  unless sockpath
    dir = File.join(ENV['HOME'], '.snailgun')
    begin
      Dir.mkdir dir, 0700
    rescue Errno::EEXIST
      File.chmod 0700, dir
    end
    sockpath = File.join dir, $$.to_s
  end
  fix_rake if rake
  server = Snailgun::Server.new(sockpath)
  server.interactive!

when :rails
  sockdir = File.expand_path('tmp/sockets/snailgun')
  begin
    Dir.mkdir sockdir, 0700
  rescue Errno::EEXIST
    File.chmod 0700, sockdir
  end
  pids = {}
  fix_rake   # TODO: separate process for rake (but then need to choose right RAILS_ENV)
  envs.split(/[\s,]+/).uniq.each do |env|
    pids[env] = fork do
      server = Snailgun::Server.new("#{sockdir}/#{env}")
      Snailgun::Rails.load(env)
      STDERR.puts "Started server for #{env}" if verbose
      server.run
    end
  end
  STDERR.puts "Now entering subshell. Use 'exit' to terminate snailgun"
  Snailgun::Server.shell
  pids.each do |env,pid|
    Process.kill('TERM',pid)
  end
  # TODO: wait a few secs for them to die, 'KILL' if required
  STDERR.puts "Snailgun ended"
end
